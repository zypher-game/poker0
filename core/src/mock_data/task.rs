use ark_ec::CurveGroup;
use ark_ed_on_bn254::EdwardsProjective;
use ark_std::rand::SeedableRng;
use hashbrown::HashMap;
use rand_chacha::ChaChaRng;
use zshuffle::{
    reveal::{reveal0, unmask, verify_reveal0},
    Ciphertext,
};

use crate::{
    cards::{CryptoCard, RevealCard, ENCODING_CARDS_MAPPING},
    combination::CryptoCardCombination,
    play::{PlayAction, PlayerEnvBuilder},
    schnorr::KeyPair,
    task::Task,
    CiphertextAffine,
};

pub fn mock_task() -> Task {
    let mut rng = ChaChaRng::from_seed([0u8; 32]);
    let a = r##"
    {"private_key":[199,118,160,104,194,165,207,217,144,164,212,71,181,14,72,177,120,188,233,202,221,172,188,248,216,225,221,164,66,122,141,0],"public_key":[84,177,83,227,111,55,18,126,28,93,203,134,202,163,65,192,138,253,19,222,234,254,159,112,37,245,60,123,94,152,127,39,198,139,168,239,228,144,7,82,187,206,88,35,111,79,134,63,62,56,231,98,241,53,113,86,165,66,74,181,254,47,228,34]}
     "##;
    let b = r##"
    {"private_key":[159,254,8,205,249,43,125,141,199,65,215,232,162,202,51,1,249,136,244,62,94,79,52,54,199,126,33,11,174,2,3,5],"public_key":[171,79,255,114,97,88,57,128,140,5,235,119,212,133,196,118,157,193,206,99,233,50,74,226,81,238,27,195,73,79,166,5,94,53,185,211,206,160,229,182,98,91,232,221,106,21,242,162,153,250,55,49,138,11,184,221,250,42,225,150,125,187,176,46]}
      "##;
    let c = r##"
    {"private_key":[210,122,124,112,222,6,173,188,209,175,27,133,180,55,104,153,48,93,57,111,150,225,178,193,249,87,191,109,19,153,228,5],"public_key":[92,222,168,102,52,56,252,159,240,247,230,63,252,230,45,219,180,77,194,176,212,44,176,212,179,109,248,1,6,72,155,44,59,196,247,52,176,21,214,60,244,109,153,119,203,235,57,221,223,53,180,218,93,220,193,243,153,117,147,135,103,58,27,47]}
       "##;

    let alice: KeyPair = serde_json::from_str(&a).unwrap();
    let bob: KeyPair = serde_json::from_str(&b).unwrap();
    let charlie: KeyPair = serde_json::from_str(&c).unwrap();

    let card_serialized = r##"
    [{"e1":[72,132,99,235,69,231,219,44,250,241,180,225,137,249,122,221,229,43,147,96,115,229,198,116,144,177,161,238,107,3,172,2,219,58,243,156,152,45,248,138,226,69,19,157,16,79,127,1,71,151,115,58,211,166,35,72,118,140,150,160,66,245,198,37],"e2":[163,158,240,136,35,78,14,214,208,211,8,245,140,94,220,165,28,124,71,131,113,99,126,9,173,196,17,44,111,225,97,7,247,217,241,56,131,190,206,15,169,71,35,123,185,239,57,35,47,241,97,44,80,186,101,96,60,68,55,190,12,249,221,16]},{"e1":[196,78,211,103,248,206,142,62,18,152,29,0,208,103,127,215,15,84,175,217,98,194,148,65,115,118,144,30,42,93,121,43,207,102,119,246,100,212,13,184,140,220,33,147,180,255,19,34,156,23,49,60,249,133,184,121,79,182,230,235,102,253,109,6],"e2":[60,15,14,98,156,115,255,148,6,107,245,215,206,226,150,230,58,196,190,72,239,1,28,95,211,13,138,99,2,245,96,31,194,245,22,18,238,42,192,56,246,37,112,244,208,47,72,146,251,142,199,153,251,208,226,44,127,234,243,174,151,166,83,44]},{"e1":[179,109,65,146,59,131,40,159,136,14,45,222,145,198,44,227,100,152,98,227,126,56,24,132,193,107,230,41,194,105,139,24,249,83,189,36,148,115,32,162,44,195,113,252,99,210,5,40,15,62,16,196,130,159,185,119,150,203,138,16,255,31,1,10],"e2":[222,218,102,233,4,97,167,137,68,158,35,55,71,111,175,147,9,20,23,125,205,127,213,95,57,85,170,200,9,161,179,38,139,220,87,43,40,224,172,69,195,168,200,184,130,1,196,130,169,132,181,77,122,126,98,60,198,190,173,70,120,58,14,16]},{"e1":[254,73,250,52,243,251,202,152,123,30,31,136,194,247,222,129,241,83,20,92,79,50,6,55,239,62,25,38,5,252,103,32,101,82,206,163,239,98,31,221,45,83,92,53,118,125,71,73,191,206,145,103,92,141,171,222,179,167,86,174,64,119,172,42],"e2":[76,52,122,50,151,45,89,24,223,207,163,141,12,213,104,213,91,144,201,158,211,116,29,110,243,0,172,71,60,29,213,20,78,81,172,240,175,5,108,157,109,220,181,83,216,255,221,15,197,142,10,196,155,31,139,157,144,138,76,209,183,246,173,41]},{"e1":[215,228,59,210,20,42,51,141,119,60,22,176,228,99,106,237,133,104,199,183,59,47,89,139,209,172,96,158,247,150,240,2,163,165,88,236,221,85,95,3,183,194,245,156,211,72,117,169,35,172,147,170,183,182,254,168,7,131,208,15,45,212,113,41],"e2":[109,113,136,18,125,194,101,107,184,88,239,16,19,187,158,197,89,128,19,214,47,20,103,183,86,99,53,236,217,72,60,15,155,94,12,124,204,136,31,178,206,82,91,147,182,65,26,72,27,22,248,134,71,174,52,75,231,5,99,88,190,117,224,42]},{"e1":[82,160,199,159,34,156,178,131,206,155,244,248,8,215,254,152,134,119,50,252,32,195,37,152,22,112,253,21,251,207,184,38,1,204,216,71,255,2,96,226,60,173,111,21,227,75,164,233,80,236,15,38,210,231,45,141,89,201,147,162,58,120,130,1],"e2":[234,108,243,4,159,222,147,95,15,159,235,181,244,73,122,118,225,118,205,157,82,179,121,199,136,85,200,210,172,238,46,15,93,167,47,240,4,222,91,184,21,179,66,169,90,14,235,228,223,10,202,66,184,109,208,199,178,9,210,112,125,18,152,37]},{"e1":[132,11,124,144,100,67,229,211,151,70,215,3,249,52,182,130,14,39,52,59,9,206,152,55,208,101,1,52,157,221,40,5,37,44,12,19,185,1,236,76,18,28,71,34,169,17,103,155,139,207,172,171,193,229,15,222,165,249,55,9,130,77,253,31],"e2":[179,8,158,80,64,223,243,81,36,209,192,247,30,173,226,220,35,227,4,166,253,152,48,17,90,40,38,79,218,125,208,18,145,41,183,179,250,33,96,77,246,128,97,151,239,243,121,131,6,170,224,44,157,122,183,24,23,59,73,158,210,189,7,15]},{"e1":[17,159,248,122,235,138,99,154,54,37,82,46,78,97,101,93,35,129,185,153,66,84,211,204,212,152,44,242,195,14,229,26,119,64,57,10,251,196,177,197,12,212,94,161,189,28,159,203,164,159,217,7,83,200,78,118,107,254,118,236,82,254,69,12],"e2":[60,149,112,126,140,249,191,203,44,193,248,105,120,23,134,142,53,205,15,118,68,64,18,230,165,151,83,234,55,217,64,25,4,17,87,132,207,46,81,244,31,215,62,144,144,203,251,11,98,72,100,185,26,218,239,241,169,114,150,149,182,104,166,28]},{"e1":[87,128,168,176,13,34,149,88,240,13,83,126,224,177,169,103,186,225,235,196,47,37,142,45,175,144,64,174,77,5,26,9,197,136,75,202,38,131,145,3,42,22,252,171,82,38,49,137,181,3,201,112,101,123,220,66,96,2,46,238,98,23,52,21],"e2":[255,57,77,132,134,212,102,5,75,92,159,243,61,8,216,127,167,162,177,124,148,150,196,7,14,54,53,19,246,254,238,20,168,12,155,149,82,226,36,200,197,202,119,193,93,194,72,91,52,203,151,154,76,136,188,127,255,237,248,55,182,197,71,24]},{"e1":[169,6,238,109,219,210,69,50,163,2,50,200,57,182,88,188,253,118,63,94,218,4,217,48,174,177,37,131,92,120,226,20,120,233,153,112,98,226,69,144,88,97,129,196,24,208,203,57,79,118,60,123,26,184,174,97,11,81,61,206,158,52,184,27],"e2":[156,10,44,219,156,127,129,237,194,209,2,234,56,248,206,122,71,205,151,216,151,149,158,236,143,245,108,253,211,31,243,18,217,208,127,159,0,246,181,116,92,222,91,6,226,80,69,42,146,228,228,252,101,227,73,221,65,84,216,203,100,72,174,37]},{"e1":[107,81,24,172,248,199,229,231,111,40,60,148,75,181,22,102,198,157,168,43,160,23,91,20,36,130,183,116,188,169,233,12,71,244,192,115,182,2,57,208,249,147,56,29,16,10,142,148,211,214,61,242,31,94,134,90,164,87,89,230,228,65,186,10],"e2":[153,35,77,78,201,63,91,59,236,215,148,94,67,41,49,242,151,159,152,109,162,141,250,21,77,166,77,99,127,69,198,43,201,246,255,186,40,119,107,72,103,39,201,12,183,28,150,8,176,137,176,59,205,96,175,208,229,70,180,192,109,96,114,13]},{"e1":[225,226,105,210,219,97,166,194,78,196,89,157,227,36,27,116,40,236,41,87,60,135,8,148,166,148,78,220,234,82,5,19,179,228,133,50,78,51,33,221,43,170,167,96,128,149,127,39,4,182,22,123,183,220,150,123,92,92,171,55,92,166,91,32],"e2":[221,172,112,255,209,127,118,121,17,207,47,19,176,179,190,171,120,203,205,153,152,0,112,130,244,96,221,212,234,207,242,30,41,163,15,126,131,29,38,71,29,123,24,114,161,51,215,233,122,122,169,163,53,156,185,63,203,110,95,37,195,11,91,33]},{"e1":[92,136,110,243,62,171,85,137,56,138,87,236,104,4,243,156,208,39,115,222,203,146,126,49,151,81,171,213,162,13,68,28,203,145,170,163,62,39,178,141,106,132,167,206,255,167,146,117,2,233,171,206,229,42,221,117,141,123,73,246,36,34,245,17],"e2":[41,128,156,249,151,157,171,233,38,197,84,107,255,102,242,185,194,214,120,60,7,41,189,231,90,141,146,102,135,96,51,5,173,67,220,231,251,172,56,166,214,119,218,15,154,99,202,34,174,199,255,78,246,128,30,127,111,147,83,23,98,157,144,5]},{"e1":[198,13,244,194,83,173,29,209,82,11,11,132,7,19,11,40,182,196,199,23,149,107,25,243,235,114,25,156,76,252,44,14,229,69,40,101,185,48,251,247,160,210,55,186,65,175,28,235,184,150,23,132,249,181,125,2,118,167,220,206,92,168,67,27],"e2":[164,5,4,169,177,81,9,108,200,91,226,99,67,11,222,169,31,42,24,145,132,212,27,25,200,93,124,175,120,235,167,47,249,234,221,97,17,202,67,69,232,125,61,35,241,213,55,219,191,13,190,216,187,86,76,167,187,196,45,244,122,238,1,2]},{"e1":[80,70,27,46,114,161,130,170,211,103,127,110,244,57,247,70,104,25,222,23,151,136,58,94,250,113,133,136,2,90,227,44,188,30,58,89,104,206,85,49,153,122,203,65,153,179,181,213,120,21,44,5,208,208,47,202,79,186,187,11,253,107,27,19],"e2":[198,95,237,224,13,194,65,130,38,101,23,101,242,123,145,213,255,13,104,254,222,245,165,236,155,54,79,122,216,242,128,24,237,73,198,131,2,107,19,101,229,76,191,57,12,249,199,192,129,240,38,222,59,153,229,199,231,170,221,250,180,12,168,13]},{"e1":[102,116,222,64,238,144,113,91,208,150,172,140,10,67,139,90,235,103,131,227,153,145,37,178,11,97,140,164,243,192,114,31,211,238,197,195,38,141,145,223,129,224,41,79,37,174,127,97,250,210,10,147,89,228,54,153,244,74,10,205,120,146,179,16],"e2":[255,187,102,106,87,252,45,91,131,197,17,73,8,36,225,180,251,231,3,172,5,20,58,144,221,215,42,154,168,204,216,0,167,202,138,97,239,33,3,144,120,45,230,129,72,79,199,154,201,148,61,116,134,76,30,25,164,31,38,51,0,82,94,19]},{"e1":[74,238,87,213,115,247,89,45,88,59,143,85,129,100,154,193,235,230,228,139,99,242,173,158,117,102,10,45,248,152,158,12,93,143,4,200,147,164,76,54,34,175,137,14,107,204,186,190,213,73,96,173,84,158,40,125,168,55,20,200,61,78,49,9],"e2":[57,187,45,233,227,188,101,180,64,99,227,94,146,94,51,119,218,52,172,120,85,71,238,106,30,93,207,0,197,180,98,13,184,84,166,167,63,59,176,158,137,111,128,113,176,107,202,21,184,217,209,238,109,74,32,218,112,27,174,161,235,33,8,42]},{"e1":[19,30,73,88,173,169,131,246,23,251,95,113,52,106,42,124,177,229,147,168,220,123,225,247,67,133,238,201,25,141,0,20,2,68,67,146,107,207,73,205,214,186,32,175,23,46,159,185,35,250,31,207,119,53,172,236,88,216,214,136,230,154,241,6],"e2":[60,251,157,22,139,186,235,71,97,71,152,50,206,20,169,81,140,60,142,141,13,232,100,128,137,175,97,250,250,145,117,18,254,129,85,122,90,35,216,193,174,216,157,72,57,165,84,158,129,33,78,123,90,13,85,184,83,193,42,1,203,145,111,39]},{"e1":[98,18,195,245,141,51,99,30,203,107,30,78,70,62,91,191,22,186,80,180,83,36,59,227,134,89,15,206,233,172,11,5,3,43,9,168,219,94,191,124,194,66,113,81,24,238,216,138,150,176,38,84,110,10,213,86,125,35,30,226,209,5,105,28],"e2":[160,21,131,152,28,204,226,61,236,7,189,30,152,32,15,200,162,218,58,71,15,186,126,220,33,174,168,244,114,23,230,0,67,169,252,180,47,53,118,166,76,19,140,7,78,33,97,193,126,142,230,188,214,175,153,111,105,179,153,172,137,168,224,21]},{"e1":[216,216,199,180,167,77,158,162,214,90,79,0,207,121,232,168,73,214,235,71,200,76,168,217,114,94,52,224,197,82,24,27,226,69,70,71,174,169,152,142,133,244,16,192,146,205,216,232,163,155,151,232,229,113,88,151,74,173,162,243,47,15,84,0],"e2":[55,160,181,231,13,138,68,96,180,86,162,119,16,214,206,131,231,82,216,46,40,107,57,213,19,109,80,62,230,168,20,6,37,182,2,122,11,112,29,100,128,151,53,36,228,189,4,141,28,56,77,72,145,17,97,254,29,192,159,191,152,28,242,21]},{"e1":[102,152,64,73,120,194,18,121,227,59,109,120,49,87,148,164,33,1,228,250,185,68,27,181,217,54,179,14,58,197,202,35,85,17,118,217,190,34,84,42,202,245,159,211,142,119,89,238,166,217,1,197,69,22,134,177,139,62,115,174,62,19,70,36],"e2":[87,149,225,105,68,223,29,44,251,220,167,208,9,9,81,60,254,165,19,78,238,96,223,86,197,241,155,6,1,227,153,21,68,10,152,248,98,38,79,37,207,120,49,120,117,224,150,174,95,82,56,182,170,225,36,230,76,28,12,203,4,68,203,10]},{"e1":[12,96,74,165,216,167,96,50,172,20,127,178,224,11,53,203,226,152,216,167,111,121,158,62,216,217,121,125,105,8,70,37,247,99,112,152,3,71,242,26,16,75,72,106,199,213,136,110,217,14,120,93,248,199,81,104,137,90,148,241,6,123,7,6],"e2":[184,175,142,31,25,20,200,13,70,87,186,17,229,231,207,146,199,13,80,85,1,14,65,197,123,88,117,124,182,133,191,26,11,219,175,46,90,76,78,220,52,145,243,240,3,30,72,133,36,64,103,68,191,49,190,235,15,215,56,244,93,198,113,37]},{"e1":[219,231,116,217,125,69,57,83,65,116,200,78,14,38,159,81,109,44,164,155,34,3,3,163,84,220,54,54,118,190,149,40,10,3,73,204,7,40,122,8,150,108,188,238,134,177,46,248,60,59,119,41,247,1,115,95,13,216,221,76,147,248,205,28],"e2":[227,131,80,1,44,194,25,110,135,105,239,130,68,30,43,104,87,114,23,176,233,80,201,224,22,42,4,148,248,139,241,28,117,208,56,10,105,7,227,177,6,67,19,50,248,137,39,245,91,53,203,95,44,117,229,119,243,135,227,103,149,50,83,23]},{"e1":[196,114,203,218,161,245,181,193,38,56,43,64,4,176,89,136,140,130,97,211,72,169,17,166,21,208,174,121,62,223,120,43,100,151,85,236,237,103,212,64,141,236,121,75,98,126,9,154,68,128,73,199,47,223,82,84,98,136,15,104,87,171,90,48],"e2":[250,48,205,66,168,160,171,172,195,52,16,144,85,241,0,228,141,210,245,98,191,78,3,105,3,160,187,21,106,144,36,33,222,1,67,2,227,120,32,51,123,38,197,47,249,52,226,202,139,10,195,254,213,190,188,36,168,252,233,59,80,64,154,30]},{"e1":[212,201,32,14,7,16,217,248,78,152,11,81,234,200,71,182,87,196,192,8,251,94,197,230,98,247,61,164,165,68,116,0,14,3,120,80,91,152,225,233,188,104,193,126,6,42,65,210,125,218,161,112,250,164,124,89,131,128,21,3,116,184,222,43],"e2":[36,128,138,115,159,76,255,243,185,202,16,93,55,120,92,230,88,102,215,12,48,48,180,141,96,192,117,181,5,228,12,48,185,184,150,147,94,86,106,162,220,166,198,34,234,146,6,154,221,83,84,43,155,204,140,192,151,205,174,60,69,53,254,20]},{"e1":[160,25,6,145,149,62,149,234,123,98,4,10,56,41,47,224,219,166,58,13,226,82,213,205,232,211,68,221,177,191,76,35,205,255,20,58,220,95,188,185,115,101,89,94,149,159,41,15,115,180,17,199,92,210,116,184,26,152,197,229,94,41,153,22],"e2":[7,177,44,167,49,200,145,154,231,148,160,63,143,171,149,128,247,239,84,105,103,52,217,188,170,252,30,235,86,55,207,8,21,32,195,81,229,31,173,42,21,46,181,34,22,221,145,203,104,20,14,136,210,4,93,220,100,58,230,105,253,216,131,26]},{"e1":[56,146,107,97,12,63,83,9,253,243,76,163,212,97,210,114,106,128,142,60,144,30,118,214,131,60,50,223,40,53,157,0,10,139,219,27,82,121,138,74,195,170,188,98,196,190,115,136,178,235,113,20,86,61,124,111,70,67,99,254,98,186,157,38],"e2":[245,130,27,14,207,140,187,228,178,128,112,60,50,4,168,10,93,248,251,24,175,91,131,20,207,177,246,162,163,163,27,5,141,120,147,49,107,215,107,126,148,82,240,249,52,105,171,196,157,173,87,237,159,119,249,74,177,57,80,34,190,74,156,0]},{"e1":[101,25,164,160,110,156,190,182,250,91,202,213,109,242,207,76,21,166,41,220,54,253,59,96,84,63,192,64,247,64,18,27,209,46,110,251,14,171,75,46,71,196,110,247,170,133,166,49,175,188,240,57,253,98,73,92,164,157,116,139,197,13,76,27],"e2":[6,118,194,29,160,239,26,14,64,154,1,211,58,1,8,93,68,67,67,35,5,109,172,146,38,29,93,142,64,169,223,27,98,27,197,123,37,48,101,147,98,162,123,239,157,103,47,193,221,239,34,8,171,51,130,139,178,57,108,77,19,252,12,24]},{"e1":[202,88,180,126,236,149,39,221,239,186,28,220,238,191,250,44,118,191,30,45,204,57,197,68,233,225,186,145,17,97,31,14,167,88,129,163,192,148,88,43,196,62,212,86,33,44,3,7,149,70,218,193,235,45,56,243,214,66,224,173,98,157,18,41],"e2":[156,172,46,252,195,41,68,249,241,142,1,85,9,87,246,13,177,145,83,165,203,240,70,225,145,211,1,211,0,244,154,27,170,134,160,255,171,37,217,110,184,214,4,134,27,164,16,76,182,210,246,196,19,64,243,41,187,203,235,21,139,135,171,0]},{"e1":[205,167,240,119,236,43,239,130,253,98,94,195,184,36,70,10,79,199,186,219,216,74,172,235,226,133,235,243,112,6,39,38,191,42,133,165,66,241,95,112,211,43,248,43,215,30,88,233,150,192,137,97,197,104,192,207,100,94,10,241,95,229,84,6],"e2":[226,253,110,147,247,204,11,4,182,54,152,11,55,212,238,136,218,75,131,151,182,176,65,101,19,24,224,214,246,96,242,42,230,143,223,128,63,178,203,39,171,104,210,27,234,50,0,21,139,77,187,71,110,22,114,198,174,165,54,153,200,40,251,27]},{"e1":[222,213,81,10,150,78,211,165,24,83,229,113,243,34,52,36,136,101,188,211,189,25,120,86,44,117,223,207,32,36,84,28,222,169,113,115,2,176,186,56,170,88,117,186,78,45,63,245,172,197,92,69,205,167,247,127,28,117,156,60,14,133,53,48],"e2":[129,93,38,187,237,218,168,176,239,96,24,226,156,146,103,61,43,19,137,40,4,178,210,37,104,24,187,148,226,34,63,2,132,67,227,156,90,25,191,206,0,74,14,217,28,182,130,163,184,143,142,253,148,82,219,197,192,62,131,94,249,172,41,29]},{"e1":[185,147,11,14,24,46,188,124,176,250,27,198,110,206,249,155,102,181,162,1,122,231,167,225,177,190,201,23,24,79,233,13,100,105,80,174,132,26,182,72,181,169,2,24,20,235,234,173,247,28,82,49,73,182,168,207,52,224,160,168,77,251,18,8],"e2":[84,28,170,109,98,241,162,170,5,109,58,32,223,28,227,151,234,106,234,173,143,188,234,39,132,70,196,156,156,80,191,33,35,209,80,171,32,0,146,241,187,54,131,218,190,28,19,108,22,37,115,191,253,142,157,79,118,109,56,250,169,55,45,7]},{"e1":[202,98,3,85,247,137,141,94,148,56,189,185,186,188,171,159,217,234,179,162,57,95,145,73,201,157,18,208,252,97,238,6,105,120,228,230,47,200,129,242,29,67,127,87,244,143,211,218,101,133,148,178,140,156,250,43,13,181,84,210,122,144,95,6],"e2":[229,7,236,3,202,51,235,152,39,177,129,133,22,69,163,179,109,177,128,127,226,8,138,156,23,251,220,173,130,191,0,23,157,249,102,81,112,129,176,42,222,24,86,65,32,123,83,230,187,143,119,182,207,163,99,164,250,199,86,150,218,138,75,44]},{"e1":[14,241,37,219,249,209,45,99,28,131,137,142,118,74,184,156,129,7,200,21,127,138,3,104,149,130,159,47,160,239,239,27,5,100,202,192,130,231,224,217,71,87,167,119,53,144,18,78,153,21,1,148,187,183,161,25,175,30,50,140,224,75,251,41],"e2":[249,57,196,219,140,216,51,233,33,9,35,71,143,212,139,28,11,89,36,233,158,9,116,180,183,92,143,85,98,113,176,27,189,162,121,45,77,138,110,23,72,5,77,127,195,156,78,97,212,240,26,29,38,163,231,0,94,213,36,16,146,180,124,0]},{"e1":[175,253,138,55,161,151,73,25,160,94,174,43,153,140,212,19,217,167,52,91,87,1,136,252,153,176,135,83,243,51,110,20,35,69,104,234,80,98,70,158,2,101,35,54,72,146,105,77,147,211,97,110,165,209,40,50,162,54,134,83,30,242,240,15],"e2":[104,67,150,51,135,73,174,117,25,245,88,218,58,121,243,225,215,176,101,62,210,110,86,52,7,42,196,136,65,81,91,38,245,254,219,92,106,172,84,17,36,132,120,206,107,95,17,200,60,172,65,89,238,207,92,28,168,75,250,63,198,245,1,15]},{"e1":[220,130,36,122,238,231,228,163,28,141,179,1,124,225,178,97,17,98,252,33,141,224,117,76,142,187,120,206,239,232,145,34,96,197,254,195,124,20,127,53,103,116,88,200,144,29,185,22,147,205,2,111,167,237,217,118,21,36,120,231,29,137,189,10],"e2":[253,234,39,155,85,226,108,106,99,139,214,49,84,228,168,85,133,250,222,77,55,49,168,26,23,131,14,202,139,249,157,34,7,207,145,74,250,54,131,106,158,105,227,178,236,134,200,204,158,0,47,108,124,113,154,143,33,189,81,108,19,86,91,28]},{"e1":[47,154,132,214,174,229,232,233,84,73,111,53,94,19,97,244,153,130,114,173,44,228,46,152,82,106,9,128,211,136,217,29,132,244,161,18,42,33,241,41,213,50,29,255,20,100,105,179,106,144,127,203,32,158,218,133,179,111,79,117,19,65,127,24],"e2":[104,112,101,98,119,9,34,172,249,25,145,212,29,61,165,44,111,10,175,161,101,204,184,186,16,77,124,164,75,120,148,39,171,62,3,9,249,171,67,232,241,145,116,205,26,143,46,143,148,17,172,117,52,89,48,151,221,145,208,106,137,29,7,4]},{"e1":[161,74,180,1,158,13,187,244,163,111,24,133,143,113,158,17,7,56,120,48,181,180,34,254,126,31,176,234,168,122,167,1,164,23,101,47,147,80,101,110,62,88,47,244,223,126,207,243,200,147,231,41,20,171,70,55,2,27,59,141,226,109,32,40],"e2":[161,7,213,206,34,65,218,156,250,211,235,17,105,179,40,6,85,171,131,38,123,55,176,215,167,239,104,139,11,219,99,39,244,144,141,154,19,224,229,3,85,197,7,242,200,185,165,220,219,179,236,157,18,10,55,135,152,39,0,244,232,87,236,12]},{"e1":[134,173,76,34,70,46,204,247,206,181,59,37,212,141,43,209,178,227,43,9,13,134,252,153,153,226,42,203,107,215,80,41,151,123,247,122,214,110,67,141,112,137,67,55,197,61,29,193,33,159,143,52,42,159,176,102,145,44,27,74,160,155,211,23],"e2":[66,170,1,145,219,116,215,203,124,161,28,67,157,78,207,94,57,208,212,206,21,230,75,47,183,124,167,52,148,209,90,34,199,151,195,133,221,66,126,6,141,186,231,162,120,202,248,163,41,37,170,127,86,139,2,171,67,63,245,204,40,161,44,11]},{"e1":[14,169,241,158,120,237,23,195,5,140,202,205,136,7,69,231,167,20,43,124,193,194,28,125,32,144,146,100,91,251,238,41,168,155,44,194,96,88,112,85,176,49,47,176,249,81,13,14,216,118,210,223,37,30,60,6,253,25,81,185,79,250,219,9],"e2":[158,169,184,188,81,102,20,48,47,28,56,214,185,124,137,173,116,231,19,20,189,174,176,46,36,65,191,26,187,76,51,12,216,203,64,105,59,145,41,194,23,32,199,108,188,190,54,189,252,216,76,18,38,123,219,135,192,185,27,160,213,129,16,47]},{"e1":[6,50,166,21,126,106,246,214,35,132,152,124,9,91,130,64,59,238,18,212,173,95,32,166,229,8,175,20,60,148,64,12,64,39,199,229,53,44,136,178,83,127,154,30,94,251,237,4,61,98,234,94,60,99,142,68,244,102,185,197,39,57,172,38],"e2":[4,43,214,123,51,132,142,47,148,236,95,69,31,60,112,187,228,212,180,90,111,25,247,114,165,241,88,242,3,224,191,6,146,247,92,13,78,220,58,45,82,100,180,87,16,228,105,150,147,124,19,42,137,232,248,229,222,225,126,189,81,105,122,16]},{"e1":[240,60,50,89,214,173,121,53,84,182,125,42,51,95,244,5,88,109,227,194,38,178,62,14,86,49,159,99,238,161,192,45,108,177,86,155,140,170,184,126,137,141,88,215,120,99,163,6,25,254,137,147,230,206,85,247,24,254,131,143,54,41,153,38],"e2":[69,150,180,117,220,118,57,132,104,231,249,148,2,88,107,62,220,85,108,174,88,115,82,137,219,84,99,1,204,178,205,34,161,217,126,56,3,204,174,58,0,76,209,215,108,195,200,90,179,253,235,8,42,255,166,188,84,96,239,254,234,155,26,5]},{"e1":[8,220,29,190,202,32,182,60,195,119,108,64,219,205,179,49,16,25,190,129,9,236,9,221,49,152,36,178,167,173,89,44,160,40,222,110,212,126,219,182,63,235,16,80,28,188,12,235,200,18,172,221,51,14,225,210,56,142,215,100,166,65,119,34],"e2":[212,35,115,86,116,207,245,176,125,170,111,103,61,72,198,196,171,24,97,228,124,181,201,216,237,73,202,193,61,59,123,43,181,76,25,99,95,179,126,37,56,26,19,71,31,143,51,135,105,228,163,164,80,28,138,72,185,202,219,164,167,183,231,0]},{"e1":[216,208,127,203,166,158,130,151,198,90,137,65,142,32,71,55,69,27,10,227,200,37,212,201,169,225,89,78,190,220,212,9,135,148,70,46,120,24,188,116,201,201,234,6,204,68,84,239,186,130,200,74,226,95,110,126,154,121,248,96,168,52,153,43],"e2":[233,226,70,151,124,102,9,231,179,28,135,11,69,147,130,108,43,238,224,109,80,100,53,29,117,249,254,165,47,84,192,12,208,111,139,9,28,157,63,73,123,154,99,168,88,137,74,69,187,35,209,93,247,203,86,56,53,40,170,144,16,137,7,18]},{"e1":[103,231,228,246,212,186,60,203,204,57,91,76,247,234,250,72,91,157,243,52,185,47,248,47,249,128,253,160,209,169,201,10,169,132,21,47,234,14,180,208,112,54,202,161,181,229,249,232,217,222,55,56,56,119,186,203,4,4,119,62,178,82,58,6],"e2":[36,226,230,14,249,171,126,110,70,51,90,24,107,176,45,30,231,142,52,203,29,141,26,153,61,67,244,26,143,244,135,17,175,1,173,86,143,119,93,12,246,102,16,139,30,115,206,90,222,9,70,52,154,80,20,153,104,104,222,87,167,37,161,22]},{"e1":[178,106,50,253,17,178,163,251,232,9,146,202,22,247,89,215,147,110,255,174,77,75,110,17,104,171,237,22,154,169,109,14,205,32,152,250,34,43,18,175,136,60,207,123,37,122,150,220,29,229,16,113,165,205,11,188,92,99,235,110,79,115,181,22],"e2":[31,65,98,240,255,65,115,122,77,191,97,172,154,208,238,100,201,217,195,211,179,197,42,27,202,248,85,213,229,60,218,0,67,233,130,51,31,249,189,11,170,88,114,232,230,50,58,79,211,248,244,4,99,122,201,23,141,73,22,206,46,249,57,3]},{"e1":[66,89,72,48,68,222,220,253,231,95,41,35,13,119,116,36,15,204,176,176,122,192,204,173,212,42,11,106,10,155,23,28,207,45,11,247,74,158,123,55,153,182,244,60,66,108,147,160,109,142,216,12,119,127,251,27,95,249,115,195,229,41,151,30],"e2":[122,63,79,6,148,11,65,162,146,242,89,154,107,124,228,238,171,63,146,153,198,200,202,108,228,192,57,108,159,198,140,2,87,116,194,9,198,67,179,161,147,133,172,158,89,54,59,46,69,212,6,108,131,38,167,244,85,64,73,118,194,6,105,13]},{"e1":[200,173,62,86,218,123,155,35,141,86,95,221,150,28,120,32,91,219,12,41,153,31,35,193,97,61,158,42,161,87,233,47,13,146,83,47,250,76,231,216,135,173,209,69,252,237,79,219,185,3,174,115,128,25,201,107,231,71,186,25,172,138,239,47],"e2":[148,111,114,165,138,0,255,198,189,85,216,175,106,63,28,197,78,206,54,57,193,167,62,100,172,128,147,49,180,152,23,34,50,250,232,113,243,26,164,108,82,32,19,55,6,244,109,198,198,228,129,24,156,221,11,143,20,197,104,237,201,67,26,19]},{"e1":[33,144,12,12,137,108,28,112,106,128,94,207,244,154,200,249,33,13,220,20,9,60,1,33,122,20,91,7,34,182,166,18,42,241,93,124,115,131,60,157,138,235,194,131,196,11,75,70,15,99,239,216,2,15,67,209,217,115,194,147,220,83,178,42],"e2":[125,1,45,150,16,116,17,146,98,9,74,87,29,18,207,63,110,195,74,103,46,13,27,35,2,162,126,50,112,27,242,7,147,189,164,237,57,217,226,68,140,167,142,234,83,154,123,62,53,74,182,142,174,69,82,237,178,238,247,44,50,40,135,20]},{"e1":[89,18,240,153,69,70,160,160,41,196,243,23,147,101,183,117,254,255,37,211,63,239,213,8,160,1,89,10,215,86,87,25,65,62,65,74,104,233,168,176,115,131,31,56,39,27,251,126,247,116,146,185,196,137,2,212,83,172,126,210,3,161,199,46],"e2":[87,253,170,143,102,70,117,60,77,98,156,98,210,137,56,58,151,199,115,221,63,133,102,170,143,175,8,77,15,92,130,33,165,65,135,233,192,80,188,63,41,36,95,224,145,160,123,212,192,34,211,164,229,43,242,186,69,28,154,121,62,136,15,44]},{"e1":[111,120,219,102,127,201,231,181,87,22,183,243,158,23,113,203,190,233,47,50,162,215,63,14,182,137,115,104,53,92,61,24,120,175,118,215,48,110,204,47,113,10,18,161,243,23,196,119,196,88,196,108,57,240,0,14,111,72,188,255,196,175,143,15],"e2":[108,177,205,44,108,155,76,200,253,96,152,91,152,59,128,46,46,204,167,133,228,134,200,175,81,14,92,245,15,208,5,45,8,250,207,44,201,115,196,16,93,213,175,230,100,152,100,53,1,112,180,169,121,15,83,192,205,211,3,9,90,133,92,16]},{"e1":[243,117,34,70,51,61,12,191,45,184,41,97,88,156,145,114,234,218,50,151,185,106,239,40,52,233,193,243,87,88,213,31,89,133,176,107,245,109,147,95,142,126,212,87,205,153,132,93,170,179,181,91,228,0,0,145,159,152,115,83,218,236,156,16],"e2":[179,113,38,213,25,109,199,244,224,117,55,174,81,51,66,30,193,184,209,153,2,157,129,12,193,115,153,167,30,16,208,24,118,50,122,45,59,176,203,228,157,133,68,2,111,101,243,181,194,70,84,212,114,96,245,15,166,130,29,12,126,227,167,3]}]
     "##;

    let shuffle_cards: Vec<Ciphertext<EdwardsProjective>> =
        serde_json::from_str(&card_serialized).unwrap();

    let alice_deck = &shuffle_cards[..18];
    let bob_deck = &shuffle_cards[18..35];
    let charlie_deck = &shuffle_cards[35..52];

    let alice_z: zshuffle::keygen::Keypair = alice.clone().into();
    let bob_z: zshuffle::keygen::Keypair = bob.clone().into();
    let charlie_z: zshuffle::keygen::Keypair = charlie.clone().into();

    let mut a_card = vec![];
    let mut b_card = vec![];
    let mut c_card = vec![];

    let mut reveal_proofs = HashMap::new();

    for card in alice_deck.iter() {
        let (reveal_card_b, reveal_proof_b) = reveal0(&mut rng, &bob_z, card).unwrap();
        let (reveal_card_c, reveal_proof_c) = reveal0(&mut rng, &charlie_z, card).unwrap();
        let (reveal_card_a, reveal_proof_a) = reveal0(&mut rng, &alice_z, card).unwrap();
        verify_reveal0(&bob_z.public, card, &reveal_card_b, &reveal_proof_b).unwrap();
        verify_reveal0(&charlie_z.public, card, &reveal_card_c, &reveal_proof_c).unwrap();
        verify_reveal0(&alice_z.public, card, &reveal_card_a, &reveal_proof_a).unwrap();

        let reveals = vec![reveal_card_b, reveal_card_a, reveal_card_c];
        let unmasked_card = unmask(card, &reveals).unwrap();

        let opened_card = ENCODING_CARDS_MAPPING
            .get(&unmasked_card.into_affine())
            .unwrap();
        a_card.push(opened_card);

        reveal_proofs.insert(
            card,
            vec![
                (
                    RevealCard(reveal_card_a.into_affine()),
                    reveal_proof_a,
                    alice.get_public_key(),
                ),
                (
                    RevealCard(reveal_card_b.into_affine()),
                    reveal_proof_b,
                    bob.get_public_key(),
                ),
                (
                    RevealCard(reveal_card_c.into_affine()),
                    reveal_proof_c,
                    charlie.get_public_key(),
                ),
            ],
        );
    }

    for card in bob_deck.iter() {
        let (reveal_card_c, reveal_proof_c) = reveal0(&mut rng, &charlie_z, card).unwrap();
        let (reveal_card_a, reveal_proof_a) = reveal0(&mut rng, &alice_z, card).unwrap();
        let (reveal_card_b, reveal_proof_b) = reveal0(&mut rng, &bob_z, card).unwrap();
        verify_reveal0(&bob_z.public, card, &reveal_card_b, &reveal_proof_b).unwrap();
        verify_reveal0(&charlie_z.public, card, &reveal_card_c, &reveal_proof_c).unwrap();
        verify_reveal0(&alice_z.public, card, &reveal_card_a, &reveal_proof_a).unwrap();

        let reveals = vec![reveal_card_b, reveal_card_a, reveal_card_c];
        let unmasked_card = unmask(card, &reveals).unwrap();

        let opened_card = ENCODING_CARDS_MAPPING
            .get(&unmasked_card.into_affine())
            .unwrap();
        b_card.push(opened_card);

        reveal_proofs.insert(
            card,
            vec![
                (
                    RevealCard(reveal_card_a.into_affine()),
                    reveal_proof_a,
                    alice.get_public_key(),
                ),
                (
                    RevealCard(reveal_card_b.into_affine()),
                    reveal_proof_b,
                    bob.get_public_key(),
                ),
                (
                    RevealCard(reveal_card_c.into_affine()),
                    reveal_proof_c,
                    charlie.get_public_key(),
                ),
            ],
        );
    }

    for card in charlie_deck.iter() {
        let (reveal_card_c, reveal_proof_c) = reveal0(&mut rng, &charlie_z, card).unwrap();
        let (reveal_card_a, reveal_proof_a) = reveal0(&mut rng, &alice_z, card).unwrap();
        let (reveal_card_b, reveal_proof_b) = reveal0(&mut rng, &bob_z, card).unwrap();
        verify_reveal0(&bob_z.public, card, &reveal_card_b, &reveal_proof_b).unwrap();
        verify_reveal0(&charlie_z.public, card, &reveal_card_c, &reveal_proof_c).unwrap();
        verify_reveal0(&alice_z.public, card, &reveal_card_a, &reveal_proof_a).unwrap();

        let reveals = vec![reveal_card_b, reveal_card_a, reveal_card_c];
        let unmasked_card = unmask(card, &reveals).unwrap();

        let opened_card = ENCODING_CARDS_MAPPING
            .get(&unmasked_card.into_affine())
            .unwrap();
        c_card.push(opened_card);

        reveal_proofs.insert(
            card,
            vec![
                (
                    RevealCard(reveal_card_a.into_affine()),
                    reveal_proof_a,
                    alice.get_public_key(),
                ),
                (
                    RevealCard(reveal_card_b.into_affine()),
                    reveal_proof_b,
                    bob.get_public_key(),
                ),
                (
                    RevealCard(reveal_card_c.into_affine()),
                    reveal_proof_c,
                    charlie.get_public_key(),
                ),
            ],
        );
    }

    let players_keys = vec![
        alice.get_public_key(),
        bob.get_public_key(),
        charlie.get_public_key(),
    ];

    let players_hand = vec![
        alice_deck
            .iter()
            .map(|x| CryptoCard(CiphertextAffine::from(*x)))
            .collect(),
        bob_deck
            .iter()
            .map(|x| CryptoCard(CiphertextAffine::from(*x)))
            .collect(),
        charlie_deck
            .iter()
            .map(|x| CryptoCard(CiphertextAffine::from(*x)))
            .collect(),
    ];

    //  ---------------round 0--------------------
    let alice_play_0_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(0)
        .turn_id(0)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::ThreeWithOne(
            CryptoCard(alice_deck[8].into()),
            CryptoCard(alice_deck[12].into()),
            CryptoCard(alice_deck[14].into()),
            CryptoCard(alice_deck[4].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&alice_deck[8]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[12]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[14]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[4]).unwrap().clone(),
        ])
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_0_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(0)
        .turn_id(1)
        .action(PlayAction::PAAS)
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_0_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(0)
        .turn_id(2)
        .action(PlayAction::PAAS)
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let round_0 = vec![alice_play_0_0, bob_play_0_0, charlie_play_0_0];

    //  ---------------round 1--------------------
    let alice_play_1_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(0)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(alice_deck[6].into()),
            CryptoCard(alice_deck[17].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&alice_deck[6]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[17]).unwrap().clone(),
        ])
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_1_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(1)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(bob_deck[0].into()),
            CryptoCard(bob_deck[10].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&bob_deck[0]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[10]).unwrap().clone(),
        ])
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_1_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(2)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(charlie_deck[2].into()),
            CryptoCard(charlie_deck[11].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&charlie_deck[2]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[11]).unwrap().clone(),
        ])
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_1_1 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(3)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(alice_deck[7].into()),
            CryptoCard(alice_deck[13].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&alice_deck[7]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[13]).unwrap().clone(),
        ])
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_1_1 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(4)
        .action(PlayAction::PAAS)
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_1_1 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(5)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(charlie_deck[5].into()),
            CryptoCard(charlie_deck[13].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&charlie_deck[5]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[13]).unwrap().clone(),
        ])
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_1_2 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(6)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(alice_deck[5].into()),
            CryptoCard(alice_deck[11].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&alice_deck[5]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[11]).unwrap().clone(),
        ])
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_1_2 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(7)
        .action(PlayAction::PAAS)
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_1_2 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(8)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(charlie_deck[3].into()),
            CryptoCard(charlie_deck[6].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&charlie_deck[3]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[6]).unwrap().clone(),
        ])
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_1_3 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(9)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(alice_deck[2].into()),
            CryptoCard(alice_deck[3].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&alice_deck[2]).unwrap().clone(),
            reveal_proofs.get(&alice_deck[3]).unwrap().clone(),
        ])
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_1_3 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(10)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Pair(
            CryptoCard(bob_deck[6].into()),
            CryptoCard(bob_deck[8].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&bob_deck[6]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[8]).unwrap().clone(),
        ])
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_1_3 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(11)
        .action(PlayAction::PAAS)
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_1_4 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(1)
        .turn_id(12)
        .action(PlayAction::PAAS)
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let round_1 = vec![
        alice_play_1_0,
        bob_play_1_0,
        charlie_play_1_0,
        alice_play_1_1,
        bob_play_1_1,
        charlie_play_1_1,
        alice_play_1_2,
        bob_play_1_2,
        charlie_play_1_2,
        alice_play_1_3,
        bob_play_1_3,
        charlie_play_1_3,
        alice_play_1_4,
    ];

    //  ---------------round 2--------------------
    let bob_play_2_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(2)
        .turn_id(0)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Single(CryptoCard(
            bob_deck[12].into(),
        ))))
        .reveals(&[reveal_proofs.get(&bob_deck[12]).unwrap().clone()])
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_2_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(2)
        .turn_id(1)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Single(CryptoCard(
            charlie_deck[15].into(),
        ))))
        .reveals(&[reveal_proofs.get(&charlie_deck[15]).unwrap().clone()])
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_2_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(2)
        .turn_id(2)
        .action(PlayAction::PAAS)
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_2_1 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(2)
        .turn_id(3)
        .action(PlayAction::PAAS)
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let round_2 = vec![bob_play_2_0, charlie_play_2_0, alice_play_2_0, bob_play_2_1];

    //  ---------------round 3--------------------
    let charlie_play_3_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(3)
        .turn_id(0)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Straight(vec![
            CryptoCard(charlie_deck[7].into()),
            CryptoCard(charlie_deck[1].into()),
            CryptoCard(charlie_deck[10].into()),
            CryptoCard(charlie_deck[4].into()),
            CryptoCard(charlie_deck[9].into()),
        ])))
        .reveals(&[
            reveal_proofs.get(&charlie_deck[7]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[1]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[10]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[4]).unwrap().clone(),
            reveal_proofs.get(&charlie_deck[9]).unwrap().clone(),
        ])
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_3_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(3)
        .turn_id(1)
        .action(PlayAction::PAAS)
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let bob_play_3_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(3)
        .turn_id(2)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Straight(vec![
            CryptoCard(bob_deck[5].into()),
            CryptoCard(bob_deck[16].into()),
            CryptoCard(bob_deck[15].into()),
            CryptoCard(bob_deck[1].into()),
            CryptoCard(bob_deck[2].into()),
        ])))
        .reveals(&[
            reveal_proofs.get(&bob_deck[5]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[16]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[15]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[1]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[2]).unwrap().clone(),
        ])
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_3_1 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(3)
        .turn_id(3)
        .action(PlayAction::PAAS)
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_3_1 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(3)
        .turn_id(4)
        .action(PlayAction::PAAS)
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let round_3 = vec![
        charlie_play_3_0,
        alice_play_3_0,
        bob_play_3_0,
        charlie_play_3_1,
        alice_play_3_1,
    ];

    //  ---------------round 4--------------------
    let bob_play_4_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(4)
        .turn_id(0)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::FourWithTwoSingle(
            CryptoCard(bob_deck[3].into()),
            CryptoCard(bob_deck[13].into()),
            CryptoCard(bob_deck[14].into()),
            CryptoCard(bob_deck[11].into()),
            CryptoCard(bob_deck[4].into()),
            CryptoCard(bob_deck[7].into()),
        )))
        .reveals(&[
            reveal_proofs.get(&bob_deck[3]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[13]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[14]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[11]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[4]).unwrap().clone(),
            reveal_proofs.get(&bob_deck[7]).unwrap().clone(),
        ])
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_4_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(4)
        .turn_id(1)
        .action(PlayAction::PAAS)
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_4_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(4)
        .turn_id(2)
        .action(PlayAction::PAAS)
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let round_4 = vec![bob_play_4_0, charlie_play_4_0, alice_play_4_0];

    //  ---------------round 5--------------------

    let bob_play_5_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(5)
        .turn_id(0)
        .action(PlayAction::PLAY)
        .play_cards(Some(CryptoCardCombination::Single(CryptoCard(
            bob_deck[9].into(),
        ))))
        .reveals(&[reveal_proofs.get(&bob_deck[9]).unwrap().clone()])
        .build_and_sign(&bob, &mut rng)
        .unwrap();

    let charlie_play_5_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(5)
        .turn_id(1)
        .action(PlayAction::PAAS)
        .build_and_sign(&charlie, &mut rng)
        .unwrap();

    let alice_play_5_0 = PlayerEnvBuilder::new()
        .room_id(1)
        .round_id(5)
        .turn_id(2)
        .action(PlayAction::PAAS)
        .build_and_sign(&alice, &mut rng)
        .unwrap();

    let round_5 = vec![bob_play_5_0, charlie_play_5_0, alice_play_5_0];

    let players_env = vec![round_0, round_1, round_2, round_3, round_4, round_5];

    Task {
        room_id: 1,
        num_round: 6,
        players_keys,
        players_env,
        players_hand,
    }
}
